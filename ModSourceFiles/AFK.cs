/*
TODO:
- Add automatic admin exclusion
- Add optional protection while AFK
- Add chat command to mark yourself as AFK
- Cancel "AFK" status when input detected
*/

using System;
using System.Collections.Generic;
using Oxide.Core.Libraries.Covalence;

namespace Oxide.Plugins
{
    [Info("AFK", "Wulf/lukespragg", "1.1.0", ResourceId = 1922)]
    [Description("Kicks players that are AFK (away from keyboard) for too long")]

    class AFK : CovalencePlugin
    {
        // Do NOT edit this file, instead edit AFK.json in oxide/config and AFK.en.json in the oxide/lang directory,
        // or create a new language file for another language using the 'en' file as a default.

        #region Configuration

        const string permExcluded = "afk.excluded";

        bool AdminExcluded => GetConfig("AdminExcluded", true);
        int AfkLimitMinutes => GetConfig("AfkLimitMinutes", 10);
        bool KickAfkPlayers => GetConfig("KickAfkPlayers", true);
        //bool WarnBeforeKick => GetConfig("WarnBeforeKick", true);

        protected override void LoadDefaultConfig()
        {
            Config["AdminExluded"] = AdminExcluded;
            Config["AfkLimitMinutes"] = AfkLimitMinutes;
            Config["KickAfkPlayers"] = KickAfkPlayers;
            //Config["WarnBeforeKick"] = WarnBeforeKick;
            SaveConfig();
        }

        #endregion

        #region Localization

        void LoadDefaultMessages()
        {
            lang.RegisterMessages(new Dictionary<string, string>
            {
                {"KickedForAfk", "You were kicked for being AFK for {0} minutes"},
                //{"NoLongerAfk", "You are no longer AFK"},
                //{"YouWentAfk", "You went AFK"}
            }, this);
        }

        #endregion

        #region Initialization

        void Loaded()
        {
            LoadDefaultConfig();
            LoadDefaultMessages();
            permission.RegisterPermission(permExcluded, this);
        }

        void OnServerInitialized()
        {
            foreach (var player in players.Online)
            {
                lastPosition[player.BasePlayer.Id] = player.Character.Position();
                AfkCheck(player.BasePlayer);
            }
        }

        #endregion

        #region AFK Checking

        void OnUserConnected(IPlayer player) => AfkCheck(player);

        readonly Hash<string, GenericPosition> lastPosition = new Hash<string, GenericPosition>();
        readonly Dictionary<string, Timer> afkTimer = new Dictionary<string, Timer>();

        void AfkCheck(IPlayer player)
        {
            if (IsAllowed(player.Id, permExcluded)) return;

            afkTimer.Add(player.Id, timer.Repeat(AfkLimitMinutes * 60, 0, () =>
            {
                if (!IsPlayerAfk(player)) return;

                //player.Message(Lang("YouWentAfk", player.Id));

                if (KickAfkPlayers)
                {
                    // TODO: Send timed message/warning to player before kick

                    player.ConnectedPlayer.Kick(Lang("KickedForAfk", player.Id, AfkLimitMinutes));
                }
            }));
        }

        bool IsPlayerAfk(IPlayer player)
        {
            var position = player.ConnectedPlayer.Character.Position();
            if (lastPosition[player.Id].Equals(position)) return true;
            lastPosition[player.Id] = position;
            return false;
        }

        void OnUserDisconnected(IPlayer player) => ResetPlayer(player.Id);

        void ResetPlayer(string id)
        {
            if (afkTimer.ContainsKey(id))
            {
                afkTimer[id].Destroy();
                afkTimer.Remove(id);
            }
            if (lastPosition.ContainsKey(id)) lastPosition.Remove(id);
        }

        void Unload()
        {
            foreach (var player in players.Online) ResetPlayer(player.BasePlayer.Id);
        }

        #endregion

        #region Helpers

        T GetConfig<T>(string name, T defaultValue)
        {
            if (Config[name] == null) return defaultValue;
            return (T)Convert.ChangeType(Config[name], typeof(T));
        }

        string Lang(string key, string id = null, params object[] args) => string.Format(lang.GetMessage(key, this, id), args);

        bool IsAllowed(string id, string perm) => permission.UserHasPermission(id, perm);

        #endregion
    }
}
