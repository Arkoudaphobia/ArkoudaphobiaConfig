/*
 * The MIT License (MIT)
 * Copyright (c) 2015 feramor@computer.org
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:

 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

//Microsoft
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Text;

//Oxide
using Oxide.Core;
using Oxide.Core.Logging;
using Oxide.Core.Plugins;
using Oxide.Game.Rust;
using Oxide.Game.Rust.Cui;

//UnityEngine
using UnityEngine;

//Others
using Newtonsoft.Json;

// Do NOT edit this file, instead edit Polling.json in server/<identity>/oxide/config

namespace Oxide.Plugins
{
    [Info("Polling Plugin", "Feramor", "1.1.1", ResourceId = 793)]
    [Description("Allows players with permission to run polls.")]
    public class Polling : RustPlugin
    {
        #region Custom Classes
        static class Constants
        {
            public const string ConfigVersion = "1.0.7";
        }
        public class Poll
        {
            public string Command { set; get; }
            public string Question { set; get; }
            public string Permission { set; get; }
            public bool Custom { set; get; }
            public Dictionary<int, PollChoice> PollChoices { set; get; }
        }
        public class PollChoice
        {
            public string ChoiceText { set; get; }
            public string ChoiceConsoleCommand { set; get; }
        }
        public class PollData
        {
            public string Command { set; get; }
            public bool isActive { set; get; }
            public int ID { set; get; }
            public uint StartTime { set; get; }
            public uint EndTime { set; get; }
            public string Question { set; get; }
            public string Target { set; get; }
            public List<PollChoiceData> PollChoices { set; get; }
            public List<string> VotedUserList { set; get; }
            public string Owner { set; get; }
        }
        public class PollChoiceData
        {
            public string ChoiceText { set; get; }
            public int VoteCount { set; get; }
        }
        #endregion
        #region Veriables
        private static Core.Logging.Logger RootLogger = Interface.GetMod().RootLogger;

        private Dictionary<string, object> MainSettings;
        private Dictionary<string, object> PluginSetting;
        private Dictionary<string, object> CustomPolls;

        private Dictionary<string,Poll> PollTypes;
        private PollData Current;
        private SortedList<int,PollData> History;

        private Dictionary<ulong, string> Active_GUI_CurrentPoll;
        private Dictionary<ulong, string> Active_GUI_Help;
        private Dictionary<ulong, string> Active_GUI_History;
        private Dictionary<ulong, Timer> CurrentPollUpdater;
        private Timer CurrentPollTimer = null;
        private Timer CurrentPollReminder = null;
        #endregion
        #region Localization
        void LoadDefaultMessages()
        {
            var messages = new Dictionary<string, string>
            {
                {"ButtonCurrent","Current Poll" },
                {"ButtonHistory","Poll History" },
                {"ButtonHelp","Help" },
                {"ButtonClose","Close" },
                {"ButtonResults","Results" },
                {"ErrorNoActivePoll","There is <color=#ce422b>no</color> active poll right now!\n\nCheck back later or keep an eye on chat for an announcement." },
                {"CanCreatePoll","<color=#ce422b>Admin</color> Menu\n   You have permission to create given types of polls.\n\n" },
                {"CantCreatePoll","You <color=#ce422b>don't</color> have permission to create polls." },
                {"AutoRefresh","This menu refresh automatically every <color=#ce422b>10</color> seconds." },
                {"HelpUserKickPoll","<color=#ce422b> * </color>You can use following command to create a poll to kick a player." },
                {"HelpUserKickPollUsage","<color=#ce422b>     /{0}</color> 'Kick' 'Timer' 'Name|SteamID'" },
                {"HelpUserBanPoll","<color=#ce422b> * </color>You can use following command to create a poll to ban a player." },
                {"HelpUserBanPollUsage","<color=#ce422b>     /{0}</color> 'Ban' 'Timer' 'Name|SteamID'" },
                {"HelpAirdropPoll","<color=#ce422b> * </color>You can use following command to create a poll to call an airdrop." },
                {"HelpAirdropPollUsage","<color=#ce422b>     /{0}</color> 'Airdrop' 'Timer'" },
                {"HelpHeliPoll","<color=#ce422b> * </color>You can use following command to create a poll to call an patrol helicopter." },
                {"HelpHeliPollUsage","<color=#ce422b>     /{0}</color> 'Heli' 'Timer'" },
                {"HelpTimePoll","<color=#ce422b> * </color>You can use following command to create a poll to call to change time." },
                {"HelpTimePollUsage","<color=#ce422b>     /{0}</color> 'Time' 'Timer' 'Day|Night'" },
                {"HelpCustomPoll","<color=#ce422b> * </color>You can use following command to create a custom poll to ask anything." },
                {"HelpCustomPollUsage","<color=#ce422b>     /{0}</color> 'Custom' 'Timer' 'Question' 'Choice1' 'Choice2' 'Choice3' ... 'ChoiceN'"  },
                {"CustomPollCount","Currently there is/are {0} custom polls" },
                {"QuestionKick","Do you want to kick {0} ?" },
                {"QuestionBan","Do you want to ban {0} ?" },
                {"QuestionHeli","Do you want to call a Patrol Helicopter ?" },
                {"QuestionCustom","Don't edit this" },
                {"QuestionAirdrop","Do you want to call an Airdrop ?" },
                {"QuestionTime","Do you want to change time to {0} ?" },
                {"Yes","Yes" },
                {"No","No" },
                {"ErrorPermission","You <color=#ce422b>don't</color> have permission to create {0} polls." },
                {"ErrorAlreadyPoll","There is already a poll running." },
                {"ErrorSyntax","There has been an syntax error in command.\nCorrect form is\n" },
                {"ErrorTime","You have entered an invalid time.Time limits Min:30 Max:300" },
                {"PollStarted","Poll Started\n     <color=red>*</color> {0}" },
                {"PollNotVoted","You haven't voted.Please vote now!\n     <color=red>*</color> {0}" },
                {"VoteFinish","Vote Finished\n     <color=red>*</color> {0}" },
                {"VoteResult","{0} people gave vote for {1}" },
                {"HowToVote","You can use /{0} to vote." },
                {"AlreadyVoted","You have already <color=#ce422b>voted</color> for current poll!\n\nCheck back later or keep an eye on chat for an announcement for new poll." },
                {"CurrenQuestion","<color=#ce422b>Current</color> Poll Question" },
                {"CurrenStarted","<color=#ce422b>Current</color> Poll Started" },
                {"CurrenOwner","<color=#ce422b>Current</color> Poll By" },
                {"CurrenTimeleft","<color=#ce422b>Current</color> Poll Will End in {0} Second(s)" },
                {"NoPoll","There is <color=#ce422b>no</color> active poll right now!" },
                {"Voted","You have voted <color=#ce422b>{0}</color> for {1}." },
                {"HistoryCount","Currently there is/are <color=#ce422b>{0}</color> poll(s) in history." },
                {"Page","Page {0}" },
                {"ButtonNextPage","Next Page" },
                {"ButtonPreviousPage","Previous Page" },
                {"Day","Day" },
                {"Night","Night" },
                {"NoUser","There is no user found with search with Name/SteamID ({0})" },
                {"KickReason","You have been kicked by poll results." },
                {"BanReason","You have been banned by poll results." }
            };
            SortedDictionary<string, string> sortedMessages = new SortedDictionary<string, string>(messages);
            messages.Clear();
            foreach (KeyValuePair<string, string> Current in sortedMessages) messages.Add(Current.Key, Current.Value);
            lang.RegisterMessages(messages, this);
            SaveConfig();
        }
        #endregion
        #region Configration
        protected override void LoadDefaultConfig()
        {
            var NewSettings = new Dictionary<string, object>
            {
                {"Main Settings",new Dictionary<string, object> { { "ChatCommand", "poll" }, { "ChatTag", "Polling" }, { "CountNonVoters", true }, { "ConfigVersion", Constants.ConfigVersion }, { "ReminderTimer", 20 } } },
                {"Plugin Settings",new Dictionary<string, object> { { "CargoPlane", new Dictionary<string, object> { { "Enabled", false }, { "PluginConsoleCommand", "" } } }, { "PatrolHelicopter", new Dictionary<string, object> { { "Enabled", false }, { "PluginConsoleCommand", "" } } }, { "AutoSkipNights", new Dictionary<string, object> { { "Enabled", true }, { "TimeOfSkip", "18:00" } } } } },
                {"Polls",new Dictionary<string, object> { } }
            };
            if ((Config["Settings"] == null) || ((Config["Settings"] as Dictionary<string, object>)["Main Settings"] as Dictionary<string, object>)["ConfigVersion"] as string != Constants.ConfigVersion)
            {
                RootLogger.Write(Core.Logging.LogType.Warning, "[Polling] Configration file (Polling.json) not found or config version mismatch with new plugin version.Replacing with new one.Please modify your config file.");
                Config.Clear();
                Config["Settings"] = NewSettings;
                SaveConfig();
            }
        }
        #endregion
        #region Hooks
        void Loaded()
        {
            LoadDefaultConfig();
            LoadDefaultMessages();

            MainSettings = (Config["Settings"] as Dictionary<string, object>)["Main Settings"] as Dictionary<string, object>;
            PluginSetting = (Config["Settings"] as Dictionary<string, object>)["Plugin Settings"] as Dictionary<string, object>;
            CustomPolls = (Config["Settings"] as Dictionary<string, object>)["Polls"] as Dictionary<string, object>;

            PollTypes = new Dictionary<string, Poll>();

            RegisterPoll("Airdrop", GetMessage("QuestionAirdrop"), "Polling.Create.Airdrop", new List<Dictionary<string, string>> { new Dictionary<string, string> { { "ChoiceText", GetMessage("Yes") }, { "ChoiceConsoleCommand", "" } }, new Dictionary<string, string> { { "ChoiceText", GetMessage("No") }, { "ChoiceConsoleCommand", "" } } }, false, 0);
            RegisterPoll("Ban", GetMessage("QuestionBan"), "Polling.Create.Ban", new List<Dictionary<string, string>> { new Dictionary<string, string> { { "ChoiceText", GetMessage("Yes") }, { "ChoiceConsoleCommand", "" } }, new Dictionary<string, string> { { "ChoiceText", GetMessage("No") }, { "ChoiceConsoleCommand", "" } } }, false, 1);
            RegisterPoll("Custom", GetMessage("QuestionCustom"), "Polling.Create.Custom", new List<Dictionary<string, string>> { }, false, 2);
            RegisterPoll("Heli", GetMessage("QuestionHeli"), "Polling.Create.Heli", new List<Dictionary<string, string>> { new Dictionary<string, string> { { "ChoiceText", GetMessage("Yes") }, { "ChoiceConsoleCommand", "" } }, new Dictionary<string, string> { { "ChoiceText", GetMessage("No") }, { "ChoiceConsoleCommand", "" } } }, false, 3);
            RegisterPoll("Kick", GetMessage("QuestionKick"), "Polling.Create.Kick", new List<Dictionary<string, string>> { new Dictionary<string, string> { { "ChoiceText",GetMessage("Yes") }, { "ChoiceConsoleCommand", "" } }, new Dictionary<string, string> { { "ChoiceText", GetMessage("No") }, { "ChoiceConsoleCommand", "" } } }, false, 4);
            RegisterPoll("Time", GetMessage("QuestionTime"), "Polling.Create.Time", new List<Dictionary<string, string>> { new Dictionary<string, string> { { "ChoiceText", GetMessage("Yes") }, { "ChoiceConsoleCommand", "" } }, new Dictionary<string, string> { { "ChoiceText", GetMessage("No") }, { "ChoiceConsoleCommand", "" } } }, false, 5);

            //Register Custom Plugins
            RootLogger.Write(Core.Logging.LogType.Info, "[Polling] Currently {0} custom poll(s) registered.(NYI)",CustomPolls.Count);
            //Register Custom Plugins

            cmd.AddChatCommand(MainSettings["ChatCommand"] as string, this, "Chat_Polling_GUI_CurrentPoll");
            try
            {
                History = Interface.Oxide.DataFileSystem.ReadObject<SortedList<int, PollData>>("Polling");
            }
            catch
            {
                History = new SortedList<int, PollData>();
                Interface.Oxide.DataFileSystem.WriteObject<SortedList<int, PollData>>("Polling", History);
                RootLogger.Write(Core.Logging.LogType.Error, "[Polling] There has been an error occured while loading history.Reseting history file.", History.Count);
                
            }

            RootLogger.Write(Core.Logging.LogType.Info, "[Polling] Currently {0} poll(s) loaded to History.", History.Count);

            Active_GUI_CurrentPoll = new Dictionary<ulong, string>();
            Active_GUI_Help = new Dictionary<ulong, string>();
            Active_GUI_History = new Dictionary<ulong, string>();
            CurrentPollUpdater = new Dictionary<ulong, Timer>();
        }
        void Unload()
        {
            foreach (var player in BasePlayer.activePlayerList)
            {
                Polling_GUI_Close(player);
            }
            if (CurrentPollTimer != null)
            {
                if (!CurrentPollTimer.Destroyed)
                    CurrentPollTimer.Destroy();
                CurrentPollTimer = null;
            }
            if (CurrentPollReminder != null)
            {
                if (!CurrentPollReminder.Destroyed)
                    CurrentPollReminder.Destroy();
                CurrentPollReminder = null;
            }
            Interface.Oxide.DataFileSystem.WriteObject<SortedList<int,PollData>>("Polling", History);
        }
        void OnServerInitialized()
        {
            if (History.TryGetValue(History.Count, out Current))
            {
                if (Current.isActive)
                {
                    RootLogger.Write(Core.Logging.LogType.Info, "[Polling] Restarting last poll timer due to server restart.", History.Count);
                    uint timer = Current.EndTime - Current.StartTime;
                    Current.StartTime = GetLibrary<Core.Libraries.Time>().GetUnixTimestamp();
                    Current.EndTime = Current.StartTime + timer;
                }
            }
        }
        void OnTick()
        {
            if (this.Current != null)
            {
                if (CurrentPollTimer == null)
                {
                    if (Current.isActive)
                    {
                        if ((int)MainSettings["ReminderTimer"] < 15)
                            MainSettings["ReminderTimer"] = 15;
                        if ((int)MainSettings["ReminderTimer"] > 60)
                            MainSettings["ReminderTimer"] = 60;
                        CurrentPollTimer = timer.Once(Current.EndTime - Current.StartTime, () => EndVote());
                        CurrentPollReminder = timer.Repeat(Convert.ToInt32(MainSettings["ReminderTimer"]), 0, () => RemindPoll());
                        RootLogger.Write(Core.Logging.LogType.Info, "[Polling] Poll started {0} for {1} seconds.", Current.Question, Current.EndTime - Current.StartTime);
                        foreach (BasePlayer ActiveUser in BasePlayer.activePlayerList)
                        {
                            SendReply(ActiveUser, string.Format(GetMessage("PollStarted"), Current.Question));
                            SendReply(ActiveUser, string.Format(GetMessage("HowToVote"), MainSettings["ChatCommand"]));
                        }
                    }
                    else
                    {
                        Current = null;
                        if (CurrentPollTimer != null)
                        {
                            if (!CurrentPollTimer.Destroyed)
                                CurrentPollTimer.Destroy();
                            CurrentPollTimer = null;
                        }
                        if (CurrentPollReminder != null)
                        {
                            if (!CurrentPollReminder.Destroyed)
                                CurrentPollReminder.Destroy();
                            CurrentPollReminder = null;
                        }
                    }
                }
                else
                {
                    if (!Current.isActive)
                    {
                        Current = null;
                        if (CurrentPollTimer != null)
                        {
                            if (!CurrentPollTimer.Destroyed)
                                CurrentPollTimer.Destroy();
                            CurrentPollTimer = null;
                        }
                        if (CurrentPollReminder != null)
                        {
                            if (!CurrentPollReminder.Destroyed)
                                CurrentPollReminder.Destroy();
                            CurrentPollReminder = null;
                        }
                    }
                }
            }
            else if ((bool)(PluginSetting["AutoSkipNights"] as Dictionary<string,object>)["Enabled"])
            {
                TOD_Sky Sky = TOD_Sky.Instance;
                if (Sky.Cycle.DateTime.ToString("HH:mm") == ((PluginSetting["AutoSkipNights"] as Dictionary<string, object>)["TimeOfSkip"] as string))
                {
                    Poll Current;
                    if (PollTypes.TryGetValue("Time", out Current))
                    {
                        PollData NewPoll = new PollData();
                        NewPoll.ID = History.Count + 1;
                        NewPoll.Command = Current.Command;
                        NewPoll.Question = string.Format(Current.Question, GetMessage("Day"));
                        NewPoll.Target = "Day";
                        NewPoll.VotedUserList = new List<string>();
                        NewPoll.PollChoices = new List<PollChoiceData>();
                        foreach (PollChoice CurrentChoice in Current.PollChoices.Values)
                        {
                            NewPoll.PollChoices.Add(new PollChoiceData { ChoiceText = CurrentChoice.ChoiceText, VoteCount = 0 });
                        }
                        NewPoll.isActive = true;
                        NewPoll.Owner = "Auto Skip Nights";
                        NewPoll.StartTime = GetLibrary<Core.Libraries.Time>().GetUnixTimestamp();
                        NewPoll.EndTime = NewPoll.StartTime + 60;
                        this.Current = NewPoll;
                        History.Add(NewPoll.ID, NewPoll);
                    }

                }
            }
        }
        void UpdateCurrentPoll(BasePlayer player)
        {
            if (!Active_GUI_CurrentPoll.ContainsKey(player.userID))
            {
                if (CurrentPollUpdater.ContainsKey(player.userID))
                    CurrentPollUpdater[player.userID].Destroy();
            }
            else if(!BasePlayer.activePlayerList.Contains(player))
            {
                if (Active_GUI_CurrentPoll.ContainsKey(player.userID))
                    Active_GUI_CurrentPoll.Remove(player.userID);
                if (CurrentPollUpdater.ContainsKey(player.userID))
                    CurrentPollUpdater[player.userID].Destroy();
            }
            else
                Polling_GUI_CurrentPoll(player);
        }
        [HookMethod("SendHelpText")]
        private void SendHelpText(BasePlayer player)
        {
            var sb = new StringBuilder()
               .Append("<size=18>Polling</size> by <color=#ce422b>Feramor</color>\n")
               .Append("  ").Append("<color=\"#ffd479\">/poll</color> - Displays polling GUI.");
            player.ChatMessage(sb.ToString());
        }
        void OnServerSave()
        {
            Interface.Oxide.DataFileSystem.WriteObject<SortedList<int, PollData>>("Polling", History);
        }
        void OnServerShutdown()
        {
            Interface.Oxide.DataFileSystem.WriteObject<SortedList<int, PollData>>("Polling", History);
        }
        #endregion
        #region Polling.GUI.Help
        [ConsoleCommand("Polling.GUI.Help")]
        void Polling_GUI_Help(ConsoleSystem.Arg arg)
        {
            if (arg == null || arg.connection == null || arg.connection.player == null)
                return;

            var player = arg.connection.player as BasePlayer;
            if (player == null)
                return;

            Polling_GUI_Close(arg);

            var elements = new CuiElementContainer();
            Active_GUI_Help[player.userID] = CuiHelper.GetGuid();
            var MainElement = elements.Add(new CuiPanel { CursorEnabled = true, Image = { Color = "0 0 0 0.85" }, RectTransform = { AnchorMin = "0.0 0.1", AnchorMax = "0.32 0.8" } }, "HUD/Overlay", Active_GUI_Help[player.userID]);
            elements.Add(new CuiPanel { Image = { Color = "0 0 0 0.90" }, RectTransform = { AnchorMin = "0.01 0.93", AnchorMax = "0.99 0.99" } }, MainElement);
            elements.Add(new CuiLabel { RectTransform = { AnchorMin = "0.02 0.93", AnchorMax = "0.99 0.99" }, Text = { Align = TextAnchor.MiddleLeft, FontSize = 12, Text = "<color=#ce422b>Polling</color> Menu" } }, MainElement);
            elements.Add(new CuiButton { Button = { Command = "Polling.GUI.CurrentPoll", Color = "192 192 192 0.90" }, RectTransform = { AnchorMin = "0.20 0.94", AnchorMax = "0.40 0.98" }, Text = { Text = GetMessage("ButtonCurrent"), Align = TextAnchor.MiddleCenter, FontSize = 12 } }, MainElement);
            elements.Add(new CuiButton { Button = { Command = "Polling.GUI.History", Color = "192 192 192 0.90" }, RectTransform = { AnchorMin = "0.41 0.94", AnchorMax = "0.61 0.98" }, Text = { Text = GetMessage("ButtonHistory"), Align = TextAnchor.MiddleCenter, FontSize = 12 } }, MainElement);
            elements.Add(new CuiButton { Button = { Command = "Polling.GUI.Help", Color = "0 255 255 0.90" }, RectTransform = { AnchorMin = "0.62 0.94", AnchorMax = "0.82 0.98" }, Text = { Text = GetMessage("ButtonHelp"), Align = TextAnchor.MiddleCenter, FontSize = 12 } }, MainElement);
            elements.Add(new CuiButton { Button = { Command = "Polling.GUI.Close", Close = MainElement, Color = "255 0 0 0.90" }, RectTransform = { AnchorMin = "0.83 0.94", AnchorMax = "0.98 0.98" }, Text = { Text = GetMessage("ButtonClose"), Align = TextAnchor.MiddleCenter, FontSize = 12 } }, MainElement);
            elements.Add(new CuiPanel { Image = { Color = "0 0 0 0.90" }, RectTransform = { AnchorMin = "0.01 0.01", AnchorMax = "0.99 0.07" } }, MainElement);
            elements.Add(new CuiLabel { RectTransform = { AnchorMin = "0.02 0.01", AnchorMax = "0.98 0.07" }, Text = { Align = TextAnchor.MiddleLeft, FontSize = 12, Text = "By <color=#ce422b>Feramor</color>" } }, MainElement);
            elements.Add(new CuiLabel { RectTransform = { AnchorMin = "0.02 0.01", AnchorMax = "0.98 0.07" }, Text = { Align = TextAnchor.MiddleRight, FontSize = 12, Text = string.Format("Version <color=#ce422b>{0}</color>", Version.ToString()) } }, MainElement);

            if (HasPermission(player))
            {
                elements.Add(new CuiLabel { RectTransform = { AnchorMin = "0.02 0.81", AnchorMax = "0.99 0.93" }, Text = { Align = TextAnchor.MiddleCenter, FontSize = 14, Text = GetMessage("CanCreatePoll") } }, MainElement);
                int Number = 0;
                if (HasPermission(player, "Polling.Create.Airdrop"))
                {
                    elements.Add(new CuiLabel { RectTransform = { AnchorMin = "0.02 " + (0.76 - (Number * 0.08)), AnchorMax = "0.99 " + (0.80 - (Number * 0.08)) }, Text = { Align = TextAnchor.MiddleLeft, FontSize = 14, Text = GetMessage("HelpAirdropPoll") } }, MainElement);
                    elements.Add(new CuiLabel { RectTransform = { AnchorMin = "0.02 " + (0.72 - (Number * 0.08)), AnchorMax = "0.99 " + (0.76 - (Number * 0.08)) }, Text = { Align = TextAnchor.MiddleLeft, FontSize = 14, Text = string.Format(GetMessage("HelpAirdropPollUsage").Replace("'","''"), MainSettings["ChatCommand"] as string) } }, MainElement);
                    Number++;
                }
                if (HasPermission(player, "Polling.Create.Ban"))
                {
                    elements.Add(new CuiLabel { RectTransform = { AnchorMin = "0.02 " + (0.76 - (Number * 0.08)), AnchorMax = "0.99 " + (0.80 - (Number * 0.08)) }, Text = { Align = TextAnchor.MiddleLeft, FontSize = 14, Text = GetMessage("HelpUserBanPoll") } }, MainElement);
                    elements.Add(new CuiLabel { RectTransform = { AnchorMin = "0.02 " + (0.72 - (Number * 0.08)), AnchorMax = "0.99 " + (0.76 - (Number * 0.08)) }, Text = { Align = TextAnchor.MiddleLeft, FontSize = 14, Text = string.Format(GetMessage("HelpUserBanPollUsage").Replace("'", "''"), MainSettings["ChatCommand"] as string) } }, MainElement);
                    Number++;
                }
                if (HasPermission(player, "Polling.Create.Custom"))
                {
                    elements.Add(new CuiLabel { RectTransform = { AnchorMin = "0.02 " + (0.76 - (Number * 0.08)), AnchorMax = "0.99 " + (0.80 - (Number * 0.08)) }, Text = { Align = TextAnchor.MiddleLeft, FontSize = 14, Text = GetMessage("HelpCustomPoll") } }, MainElement);
                    elements.Add(new CuiLabel { RectTransform = { AnchorMin = "0.02 " + (0.72 - (Number * 0.08)), AnchorMax = "0.99 " + (0.76 - (Number * 0.08)) }, Text = { Align = TextAnchor.MiddleLeft, FontSize = 14, Text = string.Format(GetMessage("HelpCustomPollUsage").Replace("'", "''"), MainSettings["ChatCommand"] as string) } }, MainElement);
                    Number++;
                }
                if (HasPermission(player, "Polling.Create.Heli"))
                {
                    elements.Add(new CuiLabel { RectTransform = { AnchorMin = "0.02 " + (0.76 - (Number * 0.08)), AnchorMax = "0.99 " + (0.80 - (Number * 0.08)) }, Text = { Align = TextAnchor.MiddleLeft, FontSize = 14, Text = GetMessage("HelpHeliPoll") } }, MainElement);
                    elements.Add(new CuiLabel { RectTransform = { AnchorMin = "0.02 " + (0.72 - (Number * 0.08)), AnchorMax = "0.99 " + (0.76 - (Number * 0.08)) }, Text = { Align = TextAnchor.MiddleLeft, FontSize = 14, Text = string.Format(GetMessage("HelpHeliPollUsage").Replace("'", "''"), MainSettings["ChatCommand"] as string) } }, MainElement);
                    Number++;
                }
                if (HasPermission(player,"Polling.Create.Kick"))
                {
                    elements.Add(new CuiLabel { RectTransform = { AnchorMin = "0.02 " + (0.76 - (Number * 0.08)), AnchorMax = "0.99 " + (0.80 - (Number * 0.08)) }, Text = { Align = TextAnchor.MiddleLeft, FontSize = 14, Text = GetMessage("HelpUserKickPoll") } }, MainElement);
                    elements.Add(new CuiLabel { RectTransform = { AnchorMin = "0.02 " + (0.72 - (Number * 0.08)), AnchorMax = "0.99 " + (0.76 - (Number * 0.08)) }, Text = { Align = TextAnchor.MiddleLeft, FontSize = 14, Text = string.Format(GetMessage("HelpUserKickPollUsage").Replace("'", "''"), MainSettings["ChatCommand"] as string) } }, MainElement);
                    Number++;
                }
                if (HasPermission(player, "Polling.Create.Time"))
                {
                    elements.Add(new CuiLabel { RectTransform = { AnchorMin = "0.02 " + (0.76 - (Number * 0.08)), AnchorMax = "0.99 " + (0.80 - (Number * 0.08)) }, Text = { Align = TextAnchor.MiddleLeft, FontSize = 14, Text = GetMessage("HelpTimePoll") } }, MainElement);
                    elements.Add(new CuiLabel { RectTransform = { AnchorMin = "0.02 " + (0.72 - (Number * 0.08)), AnchorMax = "0.99 " + (0.76 - (Number * 0.08)) }, Text = { Align = TextAnchor.MiddleLeft, FontSize = 14, Text = string.Format(GetMessage("HelpTimePollUsage").Replace("'", "''"), MainSettings["ChatCommand"] as string) } }, MainElement);
                    Number++;
                }
                if (CustomPolls.Count == 0)
                {
                    elements.Add(new CuiButton { Button = { Color = "255 0 0 0.90" }, RectTransform = { AnchorMin = "0.02 0.08", AnchorMax = "0.99 0.12" }, Text = { Text = string.Format(GetMessage("CustomPollCount") + "(NYI)", CustomPolls.Count), Align = TextAnchor.MiddleCenter, FontSize = 12 } }, MainElement);
                }
                else
                {
                    elements.Add(new CuiButton { Button = { Color = "255 0 0 0.90" }, RectTransform = { AnchorMin = "0.02 0.08", AnchorMax = "0.99 0.12" }, Text = { Text = string.Format(GetMessage("CustomPollCount") + "(NYI)", CustomPolls.Count), Align = TextAnchor.MiddleCenter, FontSize = 12 } }, MainElement);
                }
            }
            else
            {
                elements.Add(new CuiLabel { RectTransform = { AnchorMin = "0.02 0.70", AnchorMax = "0.99 0.93" }, Text = { Align = TextAnchor.MiddleCenter, FontSize = 14, Text = GetMessage("CantCreatePoll") } }, MainElement);
            }
            CuiHelper.AddUi(player, elements);
        }
        #endregion
        #region Polling.GUI.CurrentPoll
        [ConsoleCommand("Polling.GUI.CurrentPoll")]
        void Polling_GUI_CurrentPoll(ConsoleSystem.Arg arg)
        {
            if (arg == null || arg.connection == null || arg.connection.player == null)
                return;

            var player = arg.connection.player as BasePlayer;
            if (player == null)
                return;
            Polling_GUI_Close(arg);
            Polling_GUI_CurrentPoll(player);
        }
        void Polling_GUI_CurrentPoll(BasePlayer player)
        {
            Polling_GUI_Close(player);
            var elements = new CuiElementContainer();
            Active_GUI_CurrentPoll[player.userID] = CuiHelper.GetGuid();
            var MainElement = elements.Add(new CuiPanel { CursorEnabled = true, Image = { Color = "0 0 0 0.85" }, RectTransform = { AnchorMin = "0.0 0.1", AnchorMax = "0.32 0.8" } }, "HUD/Overlay", Active_GUI_CurrentPoll[player.userID]);
            elements.Add(new CuiPanel { Image = { Color = "0 0 0 0.90" }, RectTransform = { AnchorMin = "0.01 0.93", AnchorMax = "0.99 0.99" } }, MainElement);
            elements.Add(new CuiLabel { RectTransform = { AnchorMin = "0.02 0.93", AnchorMax = "0.99 0.99" }, Text = { Align = TextAnchor.MiddleLeft, FontSize = 12, Text = "<color=#ce422b>Polling</color> Menu" } }, MainElement);
            elements.Add(new CuiButton { Button = { Command = "Polling.GUI.CurrentPoll", Color = "0 255 255 0.90" }, RectTransform = { AnchorMin = "0.20 0.94", AnchorMax = "0.40 0.98" }, Text = { Text = GetMessage("ButtonCurrent"), Align = TextAnchor.MiddleCenter, FontSize = 12 } }, MainElement);
            elements.Add(new CuiButton { Button = { Command = "Polling.GUI.History", Color = "192 192 192 0.90" }, RectTransform = { AnchorMin = "0.41 0.94", AnchorMax = "0.61 0.98" }, Text = { Text = GetMessage("ButtonHistory"), Align = TextAnchor.MiddleCenter, FontSize = 12 } }, MainElement);
            elements.Add(new CuiButton { Button = { Command = "Polling.GUI.Help", Color = "192 192 192 0.90" }, RectTransform = { AnchorMin = "0.62 0.94", AnchorMax = "0.82 0.98" }, Text = { Text = GetMessage("ButtonHelp"), Align = TextAnchor.MiddleCenter, FontSize = 12 } }, MainElement);
            elements.Add(new CuiButton { Button = { Command = "Polling.GUI.Close", Close = MainElement, Color = "255 0 0 0.90" }, RectTransform = { AnchorMin = "0.83 0.94", AnchorMax = "0.98 0.98" }, Text = { Text = GetMessage("ButtonClose"), Align = TextAnchor.MiddleCenter, FontSize = 12 } }, MainElement);
            elements.Add(new CuiPanel { Image = { Color = "0 0 0 0.90" }, RectTransform = { AnchorMin = "0.01 0.01", AnchorMax = "0.99 0.07" } }, MainElement);
            elements.Add(new CuiLabel { RectTransform = { AnchorMin = "0.02 0.01", AnchorMax = "0.98 0.07" }, Text = { Align = TextAnchor.MiddleLeft, FontSize = 12, Text = "By <color=#ce422b>Feramor</color>" } }, MainElement);
            elements.Add(new CuiLabel { RectTransform = { AnchorMin = "0.02 0.01", AnchorMax = "0.98 0.07" }, Text = { Align = TextAnchor.MiddleRight, FontSize = 12, Text = string.Format("Version <color=#ce422b>{0}</color>", Version.ToString()) } }, MainElement);
            if (Current == null)
            {
                elements.Add(new CuiLabel { RectTransform = { AnchorMin = "0.02 0.81", AnchorMax = "0.99 0.93" }, Text = { Align = TextAnchor.MiddleCenter, FontSize = 14, Text = GetMessage("ErrorNoActivePoll") } }, MainElement);
            }
            else
            {
                if (Current.VotedUserList.Contains(player.UserIDString))
                {
                    elements.Add(new CuiLabel { RectTransform = { AnchorMin = "0.02 0.81", AnchorMax = "0.99 0.93" }, Text = { Align = TextAnchor.MiddleCenter, FontSize = 14, Text = GetMessage("AlreadyVoted") } }, MainElement);

                    elements.Add(new CuiLabel { RectTransform = { AnchorMin = "0.02 0.73", AnchorMax = "0.99 0.81" }, Text = { Align = TextAnchor.MiddleLeft, FontSize = 14, Text = string.Format("{0}\n     - {1}", GetMessage("CurrenQuestion"), Current.Question) } }, MainElement);
                    elements.Add(new CuiLabel { RectTransform = { AnchorMin = "0.02 0.65", AnchorMax = "0.99 0.73" }, Text = { Align = TextAnchor.MiddleLeft, FontSize = 14, Text = string.Format("{0}\n     - {1}", GetMessage("CurrenStarted"), ReadableUnixTime(Current.StartTime)) } }, MainElement);
                    elements.Add(new CuiLabel { RectTransform = { AnchorMin = "0.02 0.61", AnchorMax = "0.99 0.65" }, Text = { Align = TextAnchor.MiddleLeft, FontSize = 14, Text = string.Format(GetMessage("CurrenTimeleft"), Current.EndTime - GetLibrary<Core.Libraries.Time>().GetUnixTimestamp()) } }, MainElement);
                    int Number = 0;
                    foreach (PollChoiceData CurrentPollChoice in Current.PollChoices)
                    {
                        int Percent = 0;
                        try { Percent = CurrentPollChoice.VoteCount * 100 / Current.VotedUserList.Count; } catch { }
                        Percent *= 90;
                        Percent /= 100;

                        elements.Add(new CuiPanel { Image = { Color = "192 192 192 0.90" }, RectTransform = { AnchorMin = "0.02 " + (0.55 - (Number * 0.06)), AnchorMax = "0.90 " + (0.59 - (Number * 0.06)) } }, MainElement);
                        elements.Add(new CuiPanel { Image = { Color = "0 255 255 1" }, RectTransform = { AnchorMin = "0.02 " + (0.55 - (Number * 0.06)), AnchorMax = "0." + Percent + " " + (0.59 - (Number * 0.06)) } }, MainElement);
                        elements.Add(new CuiLabel { RectTransform = { AnchorMin = "0.02 " + (0.55 - (Number * 0.06)), AnchorMax = "0.90 " + (0.59 - (Number * 0.06)) }, Text = { Align = TextAnchor.MiddleCenter, FontSize = 14, Text = CurrentPollChoice.ChoiceText } }, MainElement);
                        elements.Add(new CuiLabel { RectTransform = { AnchorMin = "0.91 " + (0.55 - (Number * 0.06)), AnchorMax = "0.99 " + (0.59 - (Number * 0.06)) }, Text = { Align = TextAnchor.MiddleCenter, FontSize = 14, Text = CurrentPollChoice.VoteCount.ToString() } }, MainElement);
                        Number++;
                    }

                }
                else
                {
                    elements.Add(new CuiLabel { RectTransform = { AnchorMin = "0.02 0.84", AnchorMax = "0.99 0.92" }, Text = { Align = TextAnchor.MiddleLeft, FontSize = 14, Text = string.Format("{0}\n     - {1}", GetMessage("CurrenQuestion"), Current.Question) } }, MainElement);
                    elements.Add(new CuiLabel { RectTransform = { AnchorMin = "0.02 0.76", AnchorMax = "0.99 0.84" }, Text = { Align = TextAnchor.MiddleLeft, FontSize = 14, Text = string.Format("{0}\n     - {1}", GetMessage("CurrenStarted"), ReadableUnixTime(Current.StartTime)) } }, MainElement);
                    elements.Add(new CuiLabel { RectTransform = { AnchorMin = "0.02 0.72", AnchorMax = "0.99 0.76" }, Text = { Align = TextAnchor.MiddleLeft, FontSize = 14, Text = string.Format(GetMessage("CurrenTimeleft"), Current.EndTime - GetLibrary<Core.Libraries.Time>().GetUnixTimestamp()) } }, MainElement);

                    int Number = 0;
                    foreach (PollChoiceData CurrentPollChoice in Current.PollChoices)
                    {
                        elements.Add(new CuiButton { Button = { Command = string.Format("Polling.Vote {0}",Number), Close = MainElement, Color = "0 255 255 0.90" }, RectTransform = { AnchorMin = "0.02 " + (0.66 - (Number * 0.06)), AnchorMax = "0.90 " + (0.70 - (Number * 0.06)) }, Text = { Text = CurrentPollChoice.ChoiceText , Align = TextAnchor.MiddleCenter, FontSize = 12 } }, MainElement);
                        elements.Add(new CuiLabel { RectTransform = { AnchorMin = "0.91 " + (0.66 - (Number * 0.06)), AnchorMax = "0.99 " + (0.70 - (Number * 0.06)) }, Text = { Align = TextAnchor.MiddleCenter, FontSize = 14, Text = CurrentPollChoice.VoteCount.ToString() } }, MainElement);
                        Number++;
                    }
                }
            }
            elements.Add(new CuiLabel { RectTransform = { AnchorMin = "0.02 0.08", AnchorMax = "0.99 0.12" }, Text = { Align = TextAnchor.MiddleCenter, FontSize = 12, Text = GetMessage("AutoRefresh") } }, MainElement);
            CuiHelper.AddUi(player, elements);
            if (!CurrentPollUpdater.ContainsKey(player.userID))
                CurrentPollUpdater.Add(player.userID,timer.Repeat(10, 0, () => UpdateCurrentPoll(player)));
        }
        void Chat_Polling_GUI_CurrentPoll(BasePlayer player, string command, string[] args = null)
        {
            if (args.Length == 0)
            {
                Polling_GUI_CurrentPoll(player);
            }
            else if (!HasPermission(player))
            {
                Polling_GUI_CurrentPoll(player);
            }
            else
            {
                string Command = args[0];
                Poll Current;
                if (PollTypes.TryGetValue(Command,out Current))
                {
                    if (!HasPermission(player, Current.Permission))
                    {
                        SendReply(player, string.Format(GetMessage("ErrorPermission"), Command));
                    }
                    else if (this.Current != null)
                    {
                        SendReply(player, GetMessage("ErrorAlreadyPoll"));
                    }
                    else
                    {
                        CreatePool(player, Current, args);
                    }
                }
                else
                {
                    Polling_GUI_CurrentPoll(player);
                }
            }
        }
        #endregion
        #region Polling.GUI.History
        [ConsoleCommand("Polling.GUI.History")]
        void Polling_GUI_History(ConsoleSystem.Arg arg)
        {
            if (arg == null || arg.connection == null || arg.connection.player == null)
                return;

            var player = arg.connection.player as BasePlayer;
            if (player == null)
                return;
            Polling_GUI_Close(arg);

            var elements = new CuiElementContainer();
            Active_GUI_Help[player.userID] = CuiHelper.GetGuid();
            var MainElement = elements.Add(new CuiPanel { CursorEnabled = true, Image = { Color = "0 0 0 0.85" }, RectTransform = { AnchorMin = "0.0 0.1", AnchorMax = "0.32 0.8" } }, "HUD/Overlay", Active_GUI_Help[player.userID]);
            elements.Add(new CuiPanel { Image = { Color = "0 0 0 0.90" }, RectTransform = { AnchorMin = "0.01 0.93", AnchorMax = "0.99 0.99" } }, MainElement);
            elements.Add(new CuiLabel { RectTransform = { AnchorMin = "0.02 0.93", AnchorMax = "0.99 0.99" }, Text = { Align = TextAnchor.MiddleLeft, FontSize = 12, Text = "<color=#ce422b>Polling</color> Menu" } }, MainElement);
            elements.Add(new CuiButton { Button = { Command = "Polling.GUI.CurrentPoll", Color = "192 192 192 0.90" }, RectTransform = { AnchorMin = "0.20 0.94", AnchorMax = "0.40 0.98" }, Text = { Text = GetMessage("ButtonCurrent"), Align = TextAnchor.MiddleCenter, FontSize = 12 } }, MainElement);
            elements.Add(new CuiButton { Button = { Command = "Polling.GUI.History", Color = "0 255 255 0.90" }, RectTransform = { AnchorMin = "0.41 0.94", AnchorMax = "0.61 0.98" }, Text = { Text = GetMessage("ButtonHistory"), Align = TextAnchor.MiddleCenter, FontSize = 12 } }, MainElement);
            elements.Add(new CuiButton { Button = { Command = "Polling.GUI.Help", Color = "192 192 192 0.90" }, RectTransform = { AnchorMin = "0.62 0.94", AnchorMax = "0.82 0.98" }, Text = { Text = GetMessage("ButtonHelp"), Align = TextAnchor.MiddleCenter, FontSize = 12 } }, MainElement);
            elements.Add(new CuiButton { Button = { Command = "Polling.GUI.Close", Close = MainElement, Color = "255 0 0 0.90" }, RectTransform = { AnchorMin = "0.83 0.94", AnchorMax = "0.98 0.98" }, Text = { Text = GetMessage("ButtonClose"), Align = TextAnchor.MiddleCenter, FontSize = 12 } }, MainElement);
            elements.Add(new CuiPanel { Image = { Color = "0 0 0 0.90" }, RectTransform = { AnchorMin = "0.01 0.01", AnchorMax = "0.99 0.07" } }, MainElement);
            elements.Add(new CuiLabel { RectTransform = { AnchorMin = "0.02 0.01", AnchorMax = "0.98 0.07" }, Text = { Align = TextAnchor.MiddleLeft, FontSize = 12, Text = "By <color=#ce422b>Feramor</color>" } }, MainElement);
            elements.Add(new CuiLabel { RectTransform = { AnchorMin = "0.02 0.01", AnchorMax = "0.98 0.07" }, Text = { Align = TextAnchor.MiddleRight, FontSize = 12, Text = string.Format("Version <color=#ce422b>{0}</color>", Version.ToString()) } }, MainElement);

            if ((arg.Args == null || arg.Args.Length == 0) || (arg.Args.Length > 0 && arg.Args[0] == "List"))
            {
                int Page = 0;
                if (arg.Args != null)
                    if (arg.Args.Length > 1)
                        Int32.TryParse(arg.Args[1], out Page);
                elements.Add(new CuiLabel { RectTransform = { AnchorMin = "0.02 0.81", AnchorMax = "0.99 0.93" }, Text = { Align = TextAnchor.MiddleCenter, FontSize = 14, Text = string.Format(GetMessage("HistoryCount"), History.Count.ToString()) } }, MainElement);
                int Number = 0;
                for (int x = History.Count - (Page * 10);x > History.Count - (Page * 10) - 10;x-- )
                {
                    PollData CurrentPollData;
                    if (History.TryGetValue(x,out CurrentPollData))
                    {
                        elements.Add(new CuiLabel { RectTransform = { AnchorMin = "0.02 " + (0.77 - (Number * 0.06)), AnchorMax = "0.08 " + (0.81 - (Number * 0.06)) }, Text = { Align = TextAnchor.MiddleRight, FontSize = 12, Text = string.Format("{0})", x.ToString()) } }, MainElement);
                        elements.Add(new CuiPanel { Image = { Color = "192 192 192 0.90" }, RectTransform = { AnchorMin = "0.09 " + (0.77 - (Number * 0.06)), AnchorMax = "0.80 " + (0.81 - (Number * 0.06)) } }, MainElement);
                        elements.Add(new CuiLabel { RectTransform = { AnchorMin = "0.09 " + (0.77 - (Number * 0.06)), AnchorMax = "0.80 " + (0.81 - (Number * 0.06)) }, Text = { Align = TextAnchor.MiddleLeft, FontSize = 12, Text = string.Format("<color=#ce422b> {0}</color>", CurrentPollData.Question) } }, MainElement);
                        elements.Add(new CuiButton { Button = { Command = string.Format("Polling.GUI.History Info {0}", x), Close = MainElement, Color = "0 255 255 0.90" }, RectTransform = { AnchorMin = "0.81 " + (0.77 - (Number * 0.06)), AnchorMax = "0.99 " + (0.81 - (Number * 0.06)) }, Text = { Text = GetMessage("ButtonResults"), Align = TextAnchor.MiddleCenter, FontSize = 12 } }, MainElement);
                    }
                    Number++;
                }

                if (Page != 0)
                    elements.Add(new CuiButton { Button = { Command = string.Format("Polling.GUI.History List {0}",Page - 1), Close = MainElement, Color = "0 255 255 0.90" }, RectTransform = { AnchorMin = "0.02 0.08", AnchorMax = "0.42 0.12" }, Text = { Text = GetMessage("ButtonPreviousPage"), Align = TextAnchor.MiddleCenter, FontSize = 12 } }, MainElement);
                elements.Add(new CuiLabel { RectTransform = { AnchorMin = "0.42 0.08", AnchorMax = "0.59 0.12" }, Text = { Align = TextAnchor.MiddleCenter, FontSize = 12, Text = string.Format(GetMessage("Page"),Page + 1) } }, MainElement);
                if (History.Count - (Page * 10) - 10 > 0)
                    elements.Add(new CuiButton { Button = { Command = string.Format("Polling.GUI.History List {0}", Page + 1), Close = MainElement, Color = "0 255 255 0.90" }, RectTransform = { AnchorMin = "0.59 0.08", AnchorMax = "0.99 0.12" }, Text = { Text = GetMessage("ButtonNextPage"), Align = TextAnchor.MiddleCenter, FontSize = 12 } }, MainElement);
            }
            else if ((arg.Args.Length > 0 && arg.Args[0] == "Info"))
            {
                int Id = 0;
                if (arg.Args != null)
                    if (arg.Args.Length > 1)
                        Int32.TryParse(arg.Args[1], out Id);

                PollData CurrentPollData;
                if (History.TryGetValue(Id, out CurrentPollData))
                {
                    elements.Add(new CuiLabel { RectTransform = { AnchorMin = "0.02 0.84", AnchorMax = "0.99 0.92" }, Text = { Align = TextAnchor.MiddleLeft, FontSize = 14, Text = string.Format("{0}\n     - {1}", GetMessage("CurrenQuestion"), CurrentPollData.Question) } }, MainElement);
                    elements.Add(new CuiLabel { RectTransform = { AnchorMin = "0.02 0.76", AnchorMax = "0.99 0.84" }, Text = { Align = TextAnchor.MiddleLeft, FontSize = 14, Text = string.Format("{0}\n     - {1}", GetMessage("CurrenStarted"), ReadableUnixTime(CurrentPollData.StartTime)) } }, MainElement);
                    elements.Add(new CuiLabel { RectTransform = { AnchorMin = "0.02 0.72", AnchorMax = "0.99 0.76" }, Text = { Align = TextAnchor.MiddleLeft, FontSize = 14, Text = string.Format("{0} <color=#ce422b>{1}</color>", GetMessage("CurrenOwner"), CurrentPollData.Owner) } }, MainElement);
                    int zNumber = 0;
                    int TotalVotes = 0;
                    foreach (PollChoiceData CurrentPollChoice in CurrentPollData.PollChoices)
                    {
                        TotalVotes += CurrentPollChoice.VoteCount;
                    }
                    foreach (PollChoiceData CurrentPollChoice in CurrentPollData.PollChoices)
                    {
                        int Percent = 0;
                        try { Percent = CurrentPollChoice.VoteCount * 100 / TotalVotes; } catch { }
                        Percent *= 90;
                        Percent /= 100;

                        elements.Add(new CuiPanel { Image = { Color = "192 192 192 0.90" }, RectTransform = { AnchorMin = "0.02 " + (0.66 - (zNumber * 0.06)), AnchorMax = "0.90 " + (0.70 - (zNumber * 0.06)) } }, MainElement);
                        elements.Add(new CuiPanel { Image = { Color = "0 255 255 1" }, RectTransform = { AnchorMin = "0.02 " + (0.66 - (zNumber * 0.06)), AnchorMax = "0." + Percent + " " + (0.70 - (zNumber * 0.06)) } }, MainElement);
                        elements.Add(new CuiLabel { RectTransform = { AnchorMin = "0.02 " + (0.66 - (zNumber * 0.06)), AnchorMax = "0.90 " + (0.70 - (zNumber * 0.06)) }, Text = { Align = TextAnchor.MiddleCenter, FontSize = 14, Text = CurrentPollChoice.ChoiceText } }, MainElement);
                        elements.Add(new CuiLabel { RectTransform = { AnchorMin = "0.91 " + (0.66 - (zNumber * 0.06)), AnchorMax = "0.99 " + (0.70 - (zNumber * 0.06)) }, Text = { Align = TextAnchor.MiddleCenter, FontSize = 14, Text = CurrentPollChoice.VoteCount.ToString() } }, MainElement);
                        zNumber++;
                    }
                }
            }
            CuiHelper.AddUi(player, elements);
        }
        #endregion
        #region Polling.GUI.Close
        [ConsoleCommand("Polling.GUI.Close")]
        void Polling_GUI_Close(ConsoleSystem.Arg arg)
        {
            if (arg == null || arg.connection == null || arg.connection.player == null)
                return;

            var player = arg.connection.player as BasePlayer;
            if (player == null)
                return;
            Polling_GUI_Close(player);
        }
        void Polling_GUI_Close(BasePlayer player)
        {
            string guiInfo;
            if (Active_GUI_CurrentPoll.TryGetValue(player.userID, out guiInfo)) CuiHelper.DestroyUi(player, guiInfo);
            if (Active_GUI_Help.TryGetValue(player.userID, out guiInfo)) CuiHelper.DestroyUi(player, guiInfo);
            if (Active_GUI_History.TryGetValue(player.userID, out guiInfo)) CuiHelper.DestroyUi(player, guiInfo);

            if (Active_GUI_CurrentPoll.ContainsKey(player.userID))
                Active_GUI_CurrentPoll.Remove(player.userID);

            if (Active_GUI_Help.ContainsKey(player.userID))
                Active_GUI_Help.Remove(player.userID);

            if (Active_GUI_History.ContainsKey(player.userID))
                Active_GUI_History.Remove(player.userID);

            if (CurrentPollUpdater.ContainsKey(player.userID))
            {
                CurrentPollUpdater[player.userID].Destroy();
                CurrentPollUpdater.Remove(player.userID);
            }
        }
        #endregion
        #region Polling Functions
        [ConsoleCommand("Polling.Vote")]
        void Polling_Vote(ConsoleSystem.Arg arg)
        {
            if (arg == null || arg.connection == null || arg.connection.player == null || arg.Args == null)
                return;

            var player = arg.connection.player as BasePlayer;
            if (player == null)
                return;
            if (Current == null)
            {
                SendReply(player, GetMessage("NoPoll"));
            }
            else if (Current.VotedUserList.Contains(player.UserIDString))
            {
                SendReply(player, GetMessage("AlreadyVoted"));
            }
            else
            {
                try
                {
                    Current.PollChoices[Convert.ToInt32(arg.Args[0])].VoteCount += 1;
                    Current.VotedUserList.Add(player.UserIDString);
                    SendReply(player, string.Format(GetMessage("Voted"), Current.PollChoices[Convert.ToInt32(arg.Args[0])].ChoiceText, Current.Question));
                }
                catch
                {
                }
            }
            Polling_GUI_Close(arg);
            Polling_GUI_CurrentPoll(player);
        }
        public Dictionary<string, string> RegisterPoll(string Command, string Question, string Permission, List<Dictionary<string, string>> PollChoices, bool Custom = true, int Type = -1)
        {
            Dictionary<string, string> Report = new Dictionary<string, string>();
            if ((string.IsNullOrEmpty(Command)) || (string.IsNullOrEmpty(Question)) || (string.IsNullOrEmpty(Permission)))
            {
                Report.Add("Status", "Failed");
                Report.Add("Reason", "You can't leave required fields empty.");
            }
            else if (PollTypes.ContainsKey(Command))
            {
                Report.Add("Status", "Failed");
                Report.Add("Reason", string.Format("There is already a poll type with {0}.", Command));
            }
            else
            {
                Poll NewPoll = new Poll();
                NewPoll.Command = Command;
                NewPoll.Custom = Custom;
                NewPoll.Permission = Permission;
                NewPoll.Question = Question;
                NewPoll.PollChoices = new Dictionary<int, PollChoice>();
                permission.RegisterPermission(Permission, this);
                foreach (Dictionary<string, string> Current in PollChoices)
                {
                    NewPoll.PollChoices.Add(NewPoll.PollChoices.Count, new PollChoice { ChoiceText = Current["ChoiceText"], ChoiceConsoleCommand = Current["ChoiceConsoleCommand"] });
                }
                PollTypes.Add(Command, NewPoll);
                Report.Add("Status", "Success");
                RootLogger.Write(Core.Logging.LogType.Info, "[Polling] Registered new type of pool ({0}).", Command);
            }
            return Report;
        }
        public void CreatePool(BasePlayer player, Poll Current, string[] args = null)
        {
            PollData NewPoll;
            uint Timer;
            if (Current.Custom==false)
            {
                switch(Current.Command)
                {
                    #region Airdrop
                    case "Airdrop":
                        if (args.Length < 2)
                        {
                            SendReply(player, GetMessage("ErrorSyntax") + string.Format(GetMessage("HelpAirdropPollUsage").Replace("'", "''"), MainSettings["ChatCommand"] as string));
                        }
                        else if (!uint.TryParse(args[1], out Timer))
                        {
                            SendReply(player, GetMessage("ErrorSyntax") + string.Format(GetMessage("HelpAirdropPollUsage").Replace("'", "''"), MainSettings["ChatCommand"] as string));
                        }
                        else if ((Timer < 30) || (Timer > 300))
                        {
                            SendReply(player, GetMessage("ErrorTime"));
                        }
                        else
                        {
                            NewPoll = new PollData();
                            NewPoll.ID = History.Count + 1;
                            NewPoll.Command = Current.Command;
                            NewPoll.Question = Current.Question;
                            NewPoll.Target = "";
                            NewPoll.VotedUserList = new List<string>();
                            NewPoll.PollChoices = new List<PollChoiceData>();
                            foreach (PollChoice CurrentChoice in Current.PollChoices.Values)
                            {
                                NewPoll.PollChoices.Add(new PollChoiceData {ChoiceText = CurrentChoice.ChoiceText, VoteCount = 0 });
                            }
                            NewPoll.isActive = true;
                            NewPoll.Owner = player.displayName;
                            NewPoll.StartTime = GetLibrary<Core.Libraries.Time>().GetUnixTimestamp();
                            NewPoll.EndTime = NewPoll.StartTime + Timer;
                            this.Current = NewPoll;
                            History.Add(NewPoll.ID, NewPoll);
                        }
                        break;
                    #endregion
                    #region Ban
                    case "Ban":
                        if (args.Length < 3)
                        {
                            SendReply(player, GetMessage("ErrorSyntax") + string.Format(GetMessage("HelpUserBanPollUsage").Replace("'", "''"), MainSettings["ChatCommand"] as string));
                        }
                        else if (!uint.TryParse(args[1], out Timer))
                        {
                            SendReply(player, GetMessage("ErrorSyntax") + string.Format(GetMessage("HelpUserBanPollUsage").Replace("'", "''"), MainSettings["ChatCommand"] as string));
                        }
                        else if ((Timer < 30) || (Timer > 300))
                        {
                            SendReply(player, GetMessage("ErrorTime"));
                        }
                        else
                        {
                            BasePlayer BanUser = BasePlayer.activePlayerList.Find(e => (e.displayName == args[2] || e.UserIDString == args[2]));
                            if (BanUser == null)
                            {
                                SendReply(player, string.Format(GetMessage("NoUser"), args[2]));
                            }
                            else
                            {
                                NewPoll = new PollData();
                                NewPoll.ID = History.Count + 1;
                                NewPoll.Command = Current.Command;
                                NewPoll.Question = string.Format(Current.Question, GetMessage(BanUser.displayName));
                                NewPoll.Target = BanUser.UserIDString;
                                NewPoll.VotedUserList = new List<string>();
                                NewPoll.PollChoices = new List<PollChoiceData>();
                                foreach (PollChoice CurrentChoice in Current.PollChoices.Values)
                                {
                                    NewPoll.PollChoices.Add(new PollChoiceData { ChoiceText = CurrentChoice.ChoiceText, VoteCount = 0 });
                                }
                                NewPoll.isActive = true;
                                NewPoll.Owner = player.displayName;
                                NewPoll.StartTime = GetLibrary<Core.Libraries.Time>().GetUnixTimestamp();
                                NewPoll.EndTime = NewPoll.StartTime + Timer;
                                this.Current = NewPoll;
                                History.Add(NewPoll.ID, NewPoll);
                            }
                        }
                        break;
                    #endregion
                    #region Custom
                    case "Custom":
                        if (args.Length < 5)
                        {
                            SendReply(player, GetMessage("ErrorSyntax") + string.Format(GetMessage("HelpCustomPollUsage").Replace("'", "''"), MainSettings["ChatCommand"] as string));
                        }
                        else if (!uint.TryParse(args[1], out Timer))
                        {
                            SendReply(player, GetMessage("ErrorSyntax") + string.Format(GetMessage("HelpCustomPollUsage").Replace("'", "''"), MainSettings["ChatCommand"] as string));
                        }
                        else if ((Timer < 30) || (Timer > 300))
                        {
                            SendReply(player, GetMessage("ErrorTime"));
                        }
                        else
                        {
                            NewPoll = new PollData();
                            NewPoll.ID = History.Count + 1;
                            NewPoll.Command = Current.Command;
                            NewPoll.Question = args[2];
                            NewPoll.Target = "";
                            NewPoll.VotedUserList = new List<string>();
                            NewPoll.PollChoices = new List<PollChoiceData>();
                            for (int x = 3;x < args.Length;x++)
                            {
                                NewPoll.PollChoices.Add(new PollChoiceData { ChoiceText = args[x], VoteCount = 0 });
                            }
                            NewPoll.isActive = true;
                            NewPoll.Owner = player.displayName;
                            NewPoll.StartTime = GetLibrary<Core.Libraries.Time>().GetUnixTimestamp();
                            NewPoll.EndTime = NewPoll.StartTime + Timer;
                            this.Current = NewPoll;
                            History.Add(NewPoll.ID, NewPoll);
                        }
                        break;
                    #endregion
                    #region Heli
                    case "Heli":
                        if (args.Length < 2)
                        {
                            SendReply(player, GetMessage("ErrorSyntax") + string.Format(GetMessage("HelpHeliPollUsage").Replace("'", "''"), MainSettings["ChatCommand"] as string));
                        }
                        else if (!uint.TryParse(args[1], out Timer))
                        {
                            SendReply(player, GetMessage("ErrorSyntax") + string.Format(GetMessage("HelpHeliPollUsage").Replace("'", "''"), MainSettings["ChatCommand"] as string));
                        }
                        else if ((Timer < 30) || (Timer > 300))
                        {
                            SendReply(player, GetMessage("ErrorTime"));
                        }
                        else
                        {
                            NewPoll = new PollData();
                            NewPoll.ID = History.Count + 1;
                            NewPoll.Command = Current.Command;
                            NewPoll.Question = Current.Question;
                            NewPoll.Target = "";
                            NewPoll.VotedUserList = new List<string>();
                            NewPoll.PollChoices = new List<PollChoiceData>();
                            foreach (PollChoice CurrentChoice in Current.PollChoices.Values)
                            {
                                NewPoll.PollChoices.Add(new PollChoiceData { ChoiceText = CurrentChoice.ChoiceText, VoteCount = 0 });
                            }
                            NewPoll.isActive = true;
                            NewPoll.Owner = player.displayName;
                            NewPoll.StartTime = GetLibrary<Core.Libraries.Time>().GetUnixTimestamp();
                            NewPoll.EndTime = NewPoll.StartTime + Timer;
                            this.Current = NewPoll;
                            History.Add(NewPoll.ID, NewPoll);
                        }
                        break;
                    #endregion
                    #region Kick
                    case "Kick":
                        if (args.Length < 3)
                        {
                            SendReply(player, GetMessage("ErrorSyntax") + string.Format(GetMessage("HelpUserKickPollUsage").Replace("'", "''"), MainSettings["ChatCommand"] as string));
                        }
                        else if (!uint.TryParse(args[1], out Timer))
                        {
                            SendReply(player, GetMessage("ErrorSyntax") + string.Format(GetMessage("HelpUserKickPollUsage").Replace("'", "''"), MainSettings["ChatCommand"] as string));
                        }
                        else if ((Timer < 30) || (Timer > 300))
                        {
                            SendReply(player, GetMessage("ErrorTime"));
                        }
                        else
                        {
                            BasePlayer KickUser = BasePlayer.activePlayerList.Find(e => (e.displayName == args[2] || e.UserIDString == args[2]));
                            if (KickUser == null)
                            {
                                SendReply(player, string.Format(GetMessage("NoUser"), args[2]));
                            }
                            else
                            {
                                NewPoll = new PollData();
                                NewPoll.ID = History.Count + 1;
                                NewPoll.Command = Current.Command;
                                NewPoll.Question = string.Format(Current.Question, GetMessage(KickUser.displayName));
                                NewPoll.Target = KickUser.UserIDString;
                                NewPoll.VotedUserList = new List<string>();
                                NewPoll.PollChoices = new List<PollChoiceData>();
                                foreach (PollChoice CurrentChoice in Current.PollChoices.Values)
                                {
                                    NewPoll.PollChoices.Add(new PollChoiceData { ChoiceText = CurrentChoice.ChoiceText, VoteCount = 0 });
                                }
                                NewPoll.isActive = true;
                                NewPoll.Owner = player.displayName;
                                NewPoll.StartTime = GetLibrary<Core.Libraries.Time>().GetUnixTimestamp();
                                NewPoll.EndTime = NewPoll.StartTime + Timer;
                                this.Current = NewPoll;
                                History.Add(NewPoll.ID, NewPoll);
                            }
                        }
                        break;
                    #endregion
                    #region Time
                    case "Time":
                        if (args.Length < 3)
                        {
                            SendReply(player, GetMessage("ErrorSyntax") + string.Format(GetMessage("HelpTimePollUsage").Replace("'", "''"), MainSettings["ChatCommand"] as string));
                        }
                        else if (!uint.TryParse(args[1], out Timer))
                        {
                            SendReply(player, GetMessage("ErrorSyntax") + string.Format(GetMessage("HelpTimePollUsage").Replace("'", "''"), MainSettings["ChatCommand"] as string));
                        }
                        else if (args[2] != "Day" && args[2] != "Night")
                        {
                            SendReply(player, GetMessage("ErrorSyntax") + string.Format(GetMessage("HelpTimePollUsage").Replace("'", "''"), MainSettings["ChatCommand"] as string));
                        }
                        else if ((Timer < 30) || (Timer > 300))
                        {
                            SendReply(player, GetMessage("ErrorTime"));
                        }
                        else
                        {
                            NewPoll = new PollData();
                            NewPoll.ID = History.Count + 1;
                            NewPoll.Command = Current.Command;
                            NewPoll.Question = string.Format(Current.Question, GetMessage(args[2]));
                            NewPoll.Target = args[2];
                            NewPoll.VotedUserList = new List<string>();
                            NewPoll.PollChoices = new List<PollChoiceData>();
                            foreach (PollChoice CurrentChoice in Current.PollChoices.Values)
                            {
                                NewPoll.PollChoices.Add(new PollChoiceData { ChoiceText = CurrentChoice.ChoiceText, VoteCount = 0 });
                            }
                            NewPoll.isActive = true;
                            NewPoll.Owner = player.displayName;
                            NewPoll.StartTime = GetLibrary<Core.Libraries.Time>().GetUnixTimestamp();
                            NewPoll.EndTime = NewPoll.StartTime + Timer;
                            this.Current = NewPoll;
                            History.Add(NewPoll.ID, NewPoll);
                        }
                        break;
                    #endregion
                }
            }
            else
            {

            }
        }
        public void EndVote()
        {
            if (Current != null)
            {
                if (Current.isActive)
                {
                    Poll PollType;
                    PollTypes.TryGetValue(Current.Command, out PollType);
                    PollChoiceData Winner = null;
                    if (PollType.Custom == false)
                    {
                        switch (Current.Command)
                        {
                            #region Airdrop
                            case "Airdrop":
                                Current.isActive = false;
                                if ((bool)MainSettings["CountNonVoters"])
                                {
                                    int NonVoters = BasePlayer.activePlayerList.Count - Current.VotedUserList.Count;
                                    if (NonVoters > 0)
                                        Current.PollChoices.Find(Choice => Choice.ChoiceText == GetMessage("No")).VoteCount += GetNonVoters();
                                }
                                Current.PollChoices.Sort((x, y) => -1 * x.VoteCount.CompareTo(y.VoteCount));
                                Winner = Current.PollChoices[0];
                                if (Winner.ChoiceText == GetMessage("Yes"))
                                {
                                    if ((bool)(PluginSetting["CargoPlane"] as Dictionary<string, object>)["Enabled"])
                                    {
                                        rust.RunServerCommand((string)(PluginSetting["CargoPlane"] as Dictionary<string, object>)["PluginConsoleCommand"]);
                                    }
                                    else
                                    {
                                        Vector3 position = GetRandomVector();
                                        BaseEntity planeEntity = GameManager.server.CreateEntity("assets/prefabs/npc/cargo plane/cargo_plane.prefab", new Vector3(), new Quaternion(1f, 0f, 0f, 0f));
                                        if (planeEntity != null)
                                        {
                                            CargoPlane plane = planeEntity.GetComponent<CargoPlane>();
                                            plane.InitDropPosition(position);
                                            planeEntity.Spawn(true);
                                        }
                                    }
                                }
                                else
                                {

                                }
                                break;
                            #endregion
                            #region Ban
                            case "Ban":
                                Current.isActive = false;
                                if ((bool)MainSettings["CountNonVoters"])
                                {
                                    int NonVoters = BasePlayer.activePlayerList.Count - Current.VotedUserList.Count;
                                    if (NonVoters > 0)
                                        Current.PollChoices.Find(Choice => Choice.ChoiceText == GetMessage("No")).VoteCount += GetNonVoters();
                                }
                                Current.PollChoices.Sort((x, y) => -1 * x.VoteCount.CompareTo(y.VoteCount));
                                Winner = Current.PollChoices[0];
                                if (Winner.ChoiceText == GetMessage("Yes"))
                                {
                                    BasePlayer BanUser = BasePlayer.activePlayerList.Find(e => e.UserIDString == Current.Target);
                                    try
                                    {
                                        ConsoleSystem.Run.Server.Quiet(string.Format("banid {0} \"{1}\" \"{2}\"", BanUser.UserIDString, BanUser.displayName, GetMessage("BanReason")).ToString(), null);
                                        ConsoleSystem.Run.Server.Quiet("server.writecfg", null);
                                        BanUser.Kick(GetMessage("BanReason"));
                                    }
                                    catch { }
                                }
                                else
                                {

                                }
                                break;
                            #endregion
                            #region Ban
                            case "Custom":
                                Current.isActive = false;
                                Current.PollChoices.Sort((x, y) => -1 * x.VoteCount.CompareTo(y.VoteCount));
                                Winner = Current.PollChoices[0];
                                break;
                            #endregion
                            #region Heli
                            case "Heli":
                                Current.isActive = false;
                                if ((bool)MainSettings["CountNonVoters"])
                                {
                                    int NonVoters = BasePlayer.activePlayerList.Count - Current.VotedUserList.Count;
                                    if (NonVoters > 0)
                                        Current.PollChoices.Find(Choice => Choice.ChoiceText == GetMessage("No")).VoteCount += GetNonVoters();
                                }
                                Current.PollChoices.Sort((x, y) => -1 * x.VoteCount.CompareTo(y.VoteCount));
                                Winner = Current.PollChoices[0];
                                if (Winner.ChoiceText == GetMessage("Yes"))
                                {
                                    if ((bool)(PluginSetting["PatrolHelicopter"] as Dictionary<string, object>)["Enabled"])
                                    {
                                        rust.RunServerCommand((string)(PluginSetting["PatrolHelicopter"] as Dictionary<string, object>)["PluginConsoleCommand"]);
                                    }
                                    else
                                    {
                                        Vector3 position = GetRandomVector();
                                        BaseEntity heliEntity = GameManager.server.CreateEntity("assets/prefabs/npc/patrol helicopter/patrolhelicopter.prefab", new Vector3(), new Quaternion(), true);
                                        if (heliEntity != null)
                                        {
                                            heliEntity.Spawn(true);
                                            float max = ConVar.Server.worldsize / 2;
                                            heliEntity.transform.position = new Vector3(-1 * max, 30, max);
                                            PatrolHelicopterAI heliAI = heliEntity.GetComponent<PatrolHelicopterAI>();
                                            heliAI.State_Move_Enter(position);
                                        }
                                    }
                                }
                                else
                                {

                                }
                                break;
                            #endregion
                            #region Kick
                            case "Kick":
                                Current.isActive = false;
                                if ((bool)MainSettings["CountNonVoters"])
                                {
                                    int NonVoters = BasePlayer.activePlayerList.Count - Current.VotedUserList.Count;
                                    if (NonVoters > 0)
                                        Current.PollChoices.Find(Choice => Choice.ChoiceText == GetMessage("No")).VoteCount += GetNonVoters();
                                }
                                Current.PollChoices.Sort((x, y) => -1 * x.VoteCount.CompareTo(y.VoteCount));
                                Winner = Current.PollChoices[0];
                                if (Winner.ChoiceText == GetMessage("Yes"))
                                {
                                    BasePlayer KickUser = BasePlayer.activePlayerList.Find(e => e.UserIDString == Current.Target);
                                    if (KickUser != null)
                                        KickUser.Kick(GetMessage("KickReason"));
                                }
                                else
                                {

                                }
                                break;
                            #endregion
                            #region Time
                            case "Time":
                                Current.isActive = false;
                                if ((bool)MainSettings["CountNonVoters"])
                                {
                                    int NonVoters = BasePlayer.activePlayerList.Count - Current.VotedUserList.Count;
                                    if (NonVoters > 0)
                                        Current.PollChoices.Find(Choice => Choice.ChoiceText == GetMessage("No")).VoteCount += GetNonVoters();
                                }
                                Current.PollChoices.Sort((x, y) => -1 * x.VoteCount.CompareTo(y.VoteCount));
                                Winner = Current.PollChoices[0];
                                if (Winner.ChoiceText == GetMessage("Yes"))
                                {
                                    if (Current.Target == "Day")
                                    {
                                        rust.RunServerCommand("env.time", "8");
                                    }
                                    else
                                    {
                                        rust.RunServerCommand("env.time", "21");
                                    }
                                }
                                else
                                {

                                }
                                break;
                            #endregion
                        }
                    }
                    else
                    {

                    }
                    if (Winner != null)
                    {
                        foreach (BasePlayer ActiveUser in BasePlayer.activePlayerList)
                        {
                            SendReply(ActiveUser, string.Format(GetMessage("VoteFinish"), Current.Question));
                            SendReply(ActiveUser, string.Format(GetMessage("VoteResult"), Winner.VoteCount, Winner.ChoiceText));
                        }
                        RootLogger.Write(Core.Logging.LogType.Info, "[Polling] Poll finished Question : {0} Result : {1} Vote Count : {2}.", Current.Question, Winner.ChoiceText, Winner.VoteCount.ToString());
                    }
                    Current.isActive = false;
                    Current = null;
                    if (CurrentPollTimer != null)
                    {
                        if (!CurrentPollTimer.Destroyed)
                            CurrentPollTimer.Destroy();
                        CurrentPollTimer = null;
                    }
                    if (CurrentPollReminder != null)
                    {
                        if (!CurrentPollReminder.Destroyed)
                            CurrentPollReminder.Destroy();
                        CurrentPollReminder = null;
                    }
                }
                else
                {
                    Current = null;
                    if (CurrentPollTimer != null)
                    {
                        if (!CurrentPollTimer.Destroyed)
                            CurrentPollTimer.Destroy();
                        CurrentPollTimer = null;
                    }
                    if (CurrentPollReminder != null)
                    {
                        if (!CurrentPollReminder.Destroyed)
                            CurrentPollReminder.Destroy();
                        CurrentPollReminder = null;
                    }
                }
            }
        }
        public void RemindPoll()
        {
            if (Current != null && Current.isActive)
            {
                foreach (BasePlayer ActiveUser in BasePlayer.activePlayerList)
                {
                    if (!Current.VotedUserList.Contains(ActiveUser.UserIDString))
                    {
                        SendReply(ActiveUser, string.Format(GetMessage("PollNotVoted"), Current.Question));
                        SendReply(ActiveUser, string.Format(GetMessage("HowToVote"), MainSettings["ChatCommand"]));
                    }
                }
            }
            else
            {
                if (CurrentPollReminder != null)
                {
                    CurrentPollReminder.Destroy();
                    CurrentPollReminder = null;
                }
            }
        }
        int GetNonVoters()
        {
            int NonVoters = 0;
            foreach(BasePlayer CurrentPlayer in BasePlayer.activePlayerList)
            {
                if (Current != null)
                    if (!Current.VotedUserList.Contains(CurrentPlayer.UserIDString))
                        NonVoters++;
            }
            return NonVoters;
        }
        #endregion
        #region Helper Methods
        string GetMessage(string key, string steamId = null) => lang.GetMessage(key, this, steamId);
        bool HasPermission(BasePlayer player, string perm) => permission.UserHasPermission(player.UserIDString, perm);
        bool HasPermission(BasePlayer player)
        {
            foreach (Poll Current in PollTypes.Values)
            {
                if (HasPermission(player, Current.Permission))
                    return true;
            }
            return false;
        }
        void SendReply(BasePlayer player,string Message)
        {
            rust.RunClientCommand(player, "chat.add", 76561198286931766, string.Format("[<color=orange>{0}</color>] : {1}", (string)MainSettings["ChatTag"], Message));
        }
        Vector3 GetRandomVector()
        {
            float max = ConVar.Server.worldsize / 2;

            float x = UnityEngine.Random.Range(max * (-1), max);
            float y = UnityEngine.Random.Range(200, 300);
            float z = UnityEngine.Random.Range(max * (-1), max);

            return new Vector3(x, y, z);
        }
        string ReadableUnixTime(ulong UnixTime)
        {
            System.DateTime dtDateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, System.DateTimeKind.Utc);
            dtDateTime = dtDateTime.AddSeconds(UnixTime).ToLocalTime();
            return dtDateTime.ToString();
        }
        #endregion
    }
}